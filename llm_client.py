from openai import OpenAI
from config import Config
import logging
import time
from pydantic import BaseModel, Field
from typing import Optional
import json

logger = logging.getLogger(__name__)

logging.getLogger("httpx").setLevel(logging.WARNING)

# Модели данных для структурированного вывода
class CriterionEvaluation(BaseModel):
    score: int = Field(..., ge=0, le=3)
    justification: str 
    recommendations: list[str] = Field(default_factory=list)

class K3Evaluation(CriterionEvaluation):
    mistaken_words: list[dict] = Field(default_factory=list)  # список словарей с ошибками

# Настройка клиента
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=Config.OPENROUTER_API_KEY,
    timeout=80.0  # 80 секунд на весь запрос
)

def make_api_request(model: str, messages: list, max_retries: int = 3) -> dict:
    """Выполняет запрос к API с повторными попытками"""
    for attempt in range(max_retries):
        try:
            logger.info("Отправка запроса к OpenRouter API")
            completion = client.chat.completions.create(
                model=model,
                messages=messages,
                response_format={"type": "json_object"},
                extra_body={
                    "guided_json": CriterionEvaluation.model_json_schema()
                },
                temperature=0.2
            )
            logger.info("Получен ответ от OpenRouter API")
            return completion.choices[0].message.content
        except Exception as e:
            if attempt == max_retries - 1:  # Если это была последняя попытка
                logger.error(f"Ошибка при запросе к API после {max_retries} попыток: {str(e)}", exc_info=True)
                raise
            wait_time = 2 ** attempt  # Экспоненциальная задержка
            logger.warning(f"Попытка {attempt + 1} не удалась. Повторная попытка через {wait_time} секунд...")
            time.sleep(wait_time)

def check_k1(text: str) -> dict:
    """Проверка по критерию K1 - Решение коммуникативной задачи"""
    try:
        logger.info("Начало проверки K1")
        
        messages = [
            {
                "role": "system",
                "content": """Проверь письмо ученика по критерию K1 (Решение коммуникативной задачи):
К1: Решение коммуникативной задачи
Задание выполнено полностью: даны полные ответы на три заданных вопроса. Правильно выбрано обращение, завершающая фраза и подпись; есть благодарность, упоминание о предыдущих контактах, выражена надежда на будущие контакты.	3 балла
Задание выполнено: даны ответы на три заданных вопроса, но на один ответ дан неполный ответ. Есть 1-2 нарушения в стилевом оформлении письма И/ИЛИ отсутствует благодарность, упоминание о предыдущих/будущих контактах.	2 балла
Задание выполнено частично: даны ответы на заданные вопросы, НО на два вопроса даны неполные ответы.
ИЛИ
Ответ на один вопрос отсутствует. Имеется более 2-х нарушений в стилевом оформлении письма и в соблюдении норм вежливости. 1 балл
Задание не выполнено: отсутствуют ответы на два вопроса ИЛИ текст письма не соответствует требуемому объему.	0 баллов
После оценки, дай рекомендации по ошибкам согласно памятке:
Письмо должно быть от 90 до 132 знаков.
Письмо должно содержать следующие обязательные аспекты:
● полный и точный ответ на вопрос на три вопроса
● нормы вежливости (благодарность за полученное письмо или/и
выражение положительных эмоций от получения письма +
надежда на последующие контакты);
● стиль (обращение + завершающая фраза + подпись в
неформальном стиле).
Реакция на новости друга не оценивается. Начинать писать письмо нужно с обращения. Указание даты и
адреса считается логической ошибкой и учитывается по критерию
"Организация текста". В подсчёт слов входит написанный участником текст,
начиная с обращения / приветствия (Dear Ben / Hello Ben) и заканчивая
подписью автора.
Если в задании даётся одно имя друга по переписке, а участник
экзамена в обращении к другу в своём ответном письме использует другое
имя, то считается, что правильное обращение отсутствует. Использование "Hey!"
/ "Hey, Kevin" (с именем друга по переписке или без него) является ошибкой,
отмечается как отсутствие правильного обращения.
В нормы вежливости входит благодарность за полученное письмо
или/и выражение радости от его получения, а также надежда на
последующие контакты – эти элементы обязательно должны быть. Ссылка
на предыдущие контакты не является обязательной, но за её наличие баллы
не снижают.
Это значит, что если нормы вежливости не соответствуют принятым
этикетным формулам, они считаются отсутствующими. Например, ученик
пишет: "Thank's for your letter". Такой речевой формулы нет, а значит
фиксируется отсутствие благодарности / выражения положительных
эмоций, т.к. все речевые формулы, необходимые для электронного личного
письма, принимаются, только если они соответствуют общепринятой норме.
Примеры фраз, которые НЕ будут приняты:
● I'm glad to hear you (смысл потерян, нужно – I'm glad to hear from you);
● I look forward to your email / I look forward to hearing from you (стиль
выбран неверно, нужно – I'm looking forward to your email / I'm looking
forward to hearing from you);
● I will write you soon (это не надежда на контакты, а обещание написать);
● See you soon (у нас друг исключительно по переписке).
В итоге по аспекту "нормы вежливости" можно получить плюс (+), если есть оба элемента: благодарность за письмо или/и
положительные эмоции от его получения и надежда на последующие
контакты при условии правильности этих речевых клише;
Что касается стиля, то он должен быть неформальным, так как мы
общаемся с другом по переписке, то есть не очень близким человеком.
Нарушением стиля считается неверное обращение (например, "Dear Peter
Smith", т.е. кроме имени дана фамилия), подпись с аналогичной ошибкой
(например, "Ann Ivanova") и завершающая фраза (например, "Sincerely
yours").
За использование полных форм глагола, нейтральной и даже
официальной лексики и отсутствие сокращений балл не снижается, аспект
"стиль" считается раскрытым. В то же время стяжённые формы глаголов
(don't, we'll, I'm и т.п.) и исключительно неформальная лексика не являются
обязательными, за их отсутствие баллы не снижаются.
Как оценивают аспект "стиль"? Можно получить плюс (+), если все три элемента (обращение, завершающая фраза и
подпись) присутствуют и соответствуют неформальному стилю
Ответ должен быть в формате JSON:
{
  "score": число_баллов,
  "justification": "текст",
  "recommendations": ["список", "рекомендаций"]
}"""
            },
            {
                "role": "user",
                "content": text
            }
        ]
        
        result = make_api_request(Config.MODEL_NAME, messages)
        evaluation = CriterionEvaluation.model_validate_json(result)
        logger.info(f"Проверка K1 завершена успешно. Балл: {evaluation.score}")
        return evaluation.model_dump()
        
    except Exception as e:
        logger.error(f"Ошибка в check_k1: {str(e)}", exc_info=True)
        raise

def check_k2(text: str) -> dict:
    """Проверка по критерию K2 - Организация текста"""
    try:
        logger.info("Начало проверки K2")
        
        messages = [
            {
                "role": "system",
                "content": """Проверь письмо ученика по критерию K2 (Организация текста):
К2: Организация текста
Текст логично выстроен и разделен на абзацы; правильно использованы языковые средства для передачи логической связи; оформление текста соответствует нормам письменного этикета, принятого в стране изучаемого языка.	2 балла
Текст в основном логично выстроен, НО имеются недостатки (1-2) при использовании средств логической связи И/ИЛИ делении на абзацы ИЛИ имеются отдельные нарушения в структурном оформлении текста письма.	1 балл
Текст выстроен нелогично; допущены многочисленные ошибки в структурном оформлении письма ИЛИ оформление текста не соответствует нормам письменного этикета.	0 баллов
После оценки, дай рекомендации по ошибкам согласно памятке:
Обязательно должны быть логичные переходы  от одной
части письма к другой (между абзацами). Отсутствие переходов считается
ошибкой.
Текст письма должен быть правильно разделён на абзацы, это деление
должно быть визуально заметно. Рекомендуются такие блоки:
● обращение;
● благодарность за письмо или/и выражение положительных эмоций
от получения письма;
● ответы на все вопросы друга;
● переход к завершению письма и надежда на будущие контакты;
● завершающая фраза;
● подпись.
Некоторые элементы письма обязательно должны быть на отдельной
строке:
● обращение;
● завершающая фраза;
● подпись.
Если завершающая фраза и подпись даны на одной строке,
то они будут засчитаны как 2 ошибки в организации текста.
Указание даты и адреса считается логической ошибкой и учитывается 
по критерию "Организация текста".
В письме также должны быть средства логической связи.
Для того, чтобы письмо было логичным, можно использовать фразы:
"You asked me about... Well, I can say that..." или "As you are interested in... I'd
like to tell you that..." .
Важно: вводные линкеры "Well, ..."", "By the way, ..." не принимаются в
качестве перехода от благодарности к ответам на вопросы друга по
переписке. 
Типичное нарушение логики – в реакции на новости друга использовать
фразы типа "Oh, what great news!" или "My congratulations!" без пояснения, о
какой новости идёт речь или с чем автор письма поздравляет своего друга по
переписке.
Ещё одна типичная логическая ошибка – когда автор противоречит сам
себе. Например, в ответе на первый вопрос автор сообщает, что не любит
гулять на свежем воздухе, а в ответе на третий вопрос утверждает, что его
любимым занятием в свободное время являются прогулки с друзьями в парк.
Неверная референция (ссылка) относится к логическим ошибкам. Чаще
всего это неправильно используемые местоимения, например, "Teenagers
can go to the park, it's healthy for us." Или "A student must never be late for
classes. He should ...".
Считается, что на вопросы друга лучше отвечать одним большим абзацем, но если получается логично,
то можно и несколькими маленькими абзацами.
Ответ должен быть в формате JSON:
{
  "score": число_баллов,
  "justification": "текст",
  "recommendations": ["список", "рекомендаций"]
}
"""            },
            {
                "role": "user",
                "content": text
            }
        ]
        
        result = make_api_request(Config.MODEL_NAME, messages)
        evaluation = CriterionEvaluation.model_validate_json(result)
        logger.info(f"Проверка K2 завершена успешно. Балл: {evaluation.score}")
        return evaluation.model_dump()
        
    except Exception as e:
        logger.error(f"Ошибка в check_k2: {str(e)}", exc_info=True)
        raise

def check_k3(text: str) -> dict:
    """Проверка по критерию K3 - Лексико-грамматическое оформление текста"""
    try:
        logger.info("Начало проверки K3")
        
        messages = [
            {
                "role": "system",
                "content": """Проверь письмо ученика по критерию K3 (Лексико-грамматическое оформление текста):
К3: Лексико-грамматическое оформление текста
Использована разнообразная лексика и различные грамматические структуры, соответствующие коммуникативной задаче (допускается не более 2-х языковых ошибок, не затрудняющих понимание).	3 балла
Имеются языковые ошибки, не затрудняющие понимание (допускается не более 4-х негрубых языковых ошибок).
ИЛИ
Языковые ошибки отсутствуют, но используются лексические единицы и грамматические структуры только элементарного уровня. 2 балла
Имеются языковые ошибки, не затрудняющие понимание (допускается не более 5-х негрубых языковых ошибок).
ИЛИ
Допущены языковые ошибки, которые затрудняют понимание (не более 1-2 грубых ошибок). 1 балл
Допущены многочисленные языковые ошибки, которые затрудняют понимание текста.	0 баллов
Памятка: 
Следует обратить внимание на то, что повторяющиеся лексически и грамматические ошибки считаются
как одна. Если слово написано с двумя-тремя орфографическими ошибками, это
все равно считается за одну орфографическую ошибку – так как участник
экзамена не знает написания одного слова. Верни ответ в формате JSON, добавь слова в начальной форме, в которых ученик
сделал лексические ошибки или ошибки в правописании, например, kat вместо cat, фразы не добавляй
{
  "score": число_баллов,
  "justification": "текст",
  "recommendations": ["список", "рекомендаций"],
  "mistaken_words": [
    {
      "incorrect": "неправильное_слово",
      "correct": "правильное_слово",
      "translation": "перевод_на_русский"
    }
  ]
}"""
            },
            {
                "role": "user",
                "content": text
            }
        ]
        
        result = make_api_request(Config.MODEL_NAME, messages)
        evaluation = K3Evaluation.model_validate_json(result)
        logger.info(f"Проверка K3 завершена успешно. Балл: {evaluation.score}")
        return evaluation.model_dump()
        
    except Exception as e:
        logger.error(f"Ошибка в check_k3: {str(e)}", exc_info=True)
        raise

def check_k4(text: str) -> dict:
    """Проверка по критерию K4 - Орфография и пунктуация"""
    try:
        logger.info("Начало проверки K4")
        
        messages = [
            {
                "role": "system",
                "content": """Проверь письмо ученика по критерию K4 (Орфография и пунктуация):
К4: Орфография и пунктуация
Орфографические и пунктуационные ошибки практически отсутствуют (допускается не более 2-х, не затрудняющих понимание текста).	2 балла
Допущенные орфографические и пунктуационные ошибки не затрудняют понимание (допускается не более 3-4 ошибок).	1 балл
Допущены многочисленные орфографические ошибки и пунктуационные ошибки.
И/ИЛИ
Допущены ошибки, которые затрудняют понимание текста. 0 баллов
Памятка:
Следует обратить внимание на то, что повторяющиеся лексически и грамматические ошибки считаются
как одна. Если слово написано с двумя-тремя орфографическими ошибками, это
все равно считается за одну орфографическую ошибку – так как участник
экзамена не знает написания одного слова.
Пунктуационные ошибки:
● восклицательный знак или точка после обращения;
● восклицательный знак после завершающей фразы;
● точка после завершающей фразы;
● отсутствие запятой после завершающей фразы;
● отсутствие точки в конце предложения ТОЛЬКО при отсутствии
заглавной буквы в начале следующего предложения, так как точки
не всегда хорошо сканируются;
● точка после подписи.
Ошибкой НЕ считается:
● отсутствие запятой после обращения;
● отсутствие точки в конце предложения, если следующее
предложение начинается с заглавной буквы (при сканировании
точки часто не отображаются, но ставить их, разумеется, нужно);
● восклицательные знаки в конце предложений, например, Thank
you for your letter!, Write back soon!;
● отсутствие запятых после вводных слов и фраз (это задание
базового уровня).
{
  "score": число_баллов,
  "justification": "текст",
  "recommendations": ["список", "рекомендаций"]
}"""
            },
            {
                "role": "user",
                "content": text
            }
        ]
        
        result = make_api_request(Config.MODEL_NAME, messages)
        evaluation = CriterionEvaluation.model_validate_json(result)
        logger.info(f"Проверка K4 завершена успешно. Балл: {evaluation.score}")
        return evaluation.model_dump()
        
    except Exception as e:
        logger.error(f"Ошибка в check_k4: {str(e)}", exc_info=True)
        raise

def analyze_writing(text: str) -> dict:
    """
    Анализирует письмо по всем критериям
    Возвращает словарь с результатами проверки по каждому критерию
    """
    results = {}
    
    try:
        logger.info("Начало проверки письма")
        logger.info(f"Длина проверяемого текста: {len(text)} символов")
        
        # Проверяем все критерии
        criteria_functions = {
            "K1": check_k1,
            "K2": check_k2,
            "K3": check_k3,
            "K4": check_k4
        }
        
        for criterion, check_function in criteria_functions.items():
            logger.info(f"Проверка {criterion}...")
            try:
                results[criterion] = check_function(text)
                logger.info(f"{criterion} проверен успешно")
            except Exception as e:
                logger.error(f"Ошибка при проверке {criterion}: {str(e)}", exc_info=True)
                results[criterion] = {
                    "score": 0,
                    "justification": f"Ошибка при проверке {criterion}",
                    "recommendations": None
                }
        
        logger.info("Проверка письма завершена")
        return results
        
    except Exception as e:
        logger.error(f"Общая ошибка в analyze_writing: {str(e)}", exc_info=True)
        return {
            "K1": {"score": 0, "justification": "Ошибка при проверке", "recommendations": None},
            "K2": {"score": 0, "justification": "Ошибка при проверке", "recommendations": None},
            "K3": {"score": 0, "justification": "Ошибка при проверке", "recommendations": None},
            "K4": {"score": 0, "justification": "Ошибка при проверке", "recommendations": None}
        }

