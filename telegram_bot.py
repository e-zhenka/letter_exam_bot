from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from config import Config
from database import Database
from llm_client import analyze_writing
from trainer import VocabularyTrainer
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

db = Database()

async def start(update: Update, context):
    user = update.effective_user
    db.add_user(user.id, user.username)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –µ–≥–æ —É–ª—É—á—à–∏—Ç—å!"
    )

async def show_vocabulary(update: Update, context):
    user = update.effective_user
    words = db.get_user_vocabulary(user.id)
    
    if not words:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
        return
    
    message = "üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n\n"
    for word in words:
        message += f"‚ùå {word['incorrect']} ‚Üí ‚úÖ {word['correct']}\n"
        message += f"üìù {word['translation']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_training")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(message, reply_markup=reply_markup)

async def handle_message(update: Update, context):
    user = update.effective_user
    text = update.message.text
    
    try:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_user(user.id, user.username or "Unknown")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        status_message = await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∏—Å—å–º–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        feedback_results = analyze_writing(text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.edit_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
        criteria_info = {
            "K1": "–†–µ—à–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏",
            "K2": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞",
            "K3": "–õ–µ–∫—Å–∏–∫–æ-–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ",
            "K4": "–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è"
        }
        
        total_score = 0
        max_score = 0
        
        for criterion, title in criteria_info.items():
            result = feedback_results[criterion]
            
            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
            score = result['score']
            total_score += score
            max_score += 3 if criterion in ['K1', 'K3'] else 2
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üìå {title} (K{criterion[-1]})\n\n"
                f"–ë–∞–ª–ª: {score}/{3 if criterion in ['K1', 'K3'] else 2}\n\n"
                f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:\n{result['justification']}\n"
            )
            
            if result['recommendations']:
                message += f"\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{result['recommendations']}"
            
            await update.message.reply_text(message)
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_message = (
            f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            f"–û–±—â–∏–π –±–∞–ª–ª: {total_score}/{max_score}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {round(total_score/max_score * 100)}%"
        )
        await update.message.reply_text(final_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_letter(user.id, text, str(feedback_results))
        
        # –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ K3 —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
        if 'K3' in feedback_results and 'mistaken_words' in feedback_results['K3']:
            try:
                db.add_words_to_vocabulary(user.id, feedback_results['K3']['mistaken_words'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å: {str(e)}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ–≤–∞—Ä—è
        keyboard = [
            [InlineKeyboardButton("üìö –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å", callback_data="show_vocabulary")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å?", reply_markup=reply_markup)
        
    except Exception as e:
        db.conn.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –µ—â–µ —Ä–∞–∑.")

async def button_callback(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    if query.data == "show_vocabulary":
        user = query.from_user
        words = db.get_user_vocabulary(user.id)
        
        if not words:
            await query.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
            return
        
        message = "üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n\n"
        for word in words:
            message += f"‚ùå {word['incorrect']} ‚Üí ‚úÖ {word['correct']}\n"
            message += f"üìù {word['translation']}\n\n"
        
        await query.message.reply_text(message)

def main():
    application = Application.builder().token(Config.TELEGRAM_TOKEN).build()
    trainer = VocabularyTrainer(db)
    
    application.add_handler(trainer.get_handler()) 
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("vocabulary", show_vocabulary))
     # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–û MessageHandler!
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    application.run_polling()

if __name__ == "__main__":
    main()